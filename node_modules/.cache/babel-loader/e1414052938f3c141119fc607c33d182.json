{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _runParallel = require('run-parallel');\n\nvar _runParallel2 = _interopRequireDefault(_runParallel);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar CloudinaryStorage = function () {\n  function CloudinaryStorage(opts) {\n    _classCallCheck(this, CloudinaryStorage);\n\n    if (!opts || !opts.cloudinary) throw new Error('`cloudinary` option required');\n    this.cloudinary = opts.cloudinary;\n    this.getFilename = this._getParamGetter('filename', undefined, opts);\n    this.getFolder = this._getParamGetter('folder', 'string', opts);\n    this.getTransformation = this._getParamGetter('transformation', 'object', opts);\n    this.getType = this._getParamGetter('type', 'string', opts);\n    this.getFormat = this._getParamGetter('format', 'string', opts);\n    this.getParams = this._getParamGetter('params', 'object', opts);\n    this.getAllowedFormats = this._getParamGetter('allowedFormats', 'object', opts);\n  }\n\n  _createClass(CloudinaryStorage, [{\n    key: '_getParamGetter',\n    value: function _getParamGetter(name, type, opts) {\n      var param = void 0;\n\n      if (typeof opts[name] === 'function') {\n        param = opts[name];\n      } else if (type && _typeof(opts[name]) === type) {\n        param = this._staticVal(opts[name]);\n      } else if (opts[name] == undefined) {\n        param = this._staticVal(undefined);\n      } else {\n        var errTemp = void 0;\n\n        if (type) {\n          errTemp = ', \\'undefined\\' or \\'' + type + '\\'';\n        } else {\n          errTemp = ' or \\'undefined\\'';\n        }\n\n        throw new TypeError('Expected opts.' + name + ' to be of types \\'function\\'' + errTemp);\n      }\n\n      return param;\n    }\n  }, {\n    key: '_handleFile',\n    value: function _handleFile(req, file, cb) {\n      var _this = this;\n\n      (0, _runParallel2.default)([this.getParams.bind(this, req, file), this.getFolder.bind(this, req, file), this.getFilename.bind(this, req, file), this.getTransformation.bind(this, req, file), this.getType.bind(this, req, file), this.getFormat.bind(this, req, file), this.getAllowedFormats.bind(this, req, file)], function (err, results) {\n        var params = results[0] || {\n          folder: results[1],\n          public_id: results[2],\n          transformation: results[3],\n          type: results[4],\n          format: results[5],\n          allowed_formats: results[6]\n        };\n\n        var stream = _this.cloudinary.v2.uploader.upload_stream(params, cb);\n\n        file.stream.pipe(stream);\n      });\n    }\n  }, {\n    key: '_removeFile',\n    value: function _removeFile(req, file, cb) {\n      this.cloudinary.v2.uploader.destroy(file.file_id, {\n        invalidate: true\n      }, cb);\n    }\n  }, {\n    key: '_staticVal',\n    value: function _staticVal(val) {\n      return function (_, __, cb) {\n        cb(undefined, val);\n      };\n    }\n  }]);\n\n  return CloudinaryStorage;\n}(); // not using 'export default' to allow compatibility with es5 require\n\n\nmodule.exports = function (opts) {\n  return new CloudinaryStorage(opts);\n};","map":null,"metadata":{},"sourceType":"script"}